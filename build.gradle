plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = '1.0'
group = 'com.github.elenterius.bakingbread'
archivesBaseName = "bakingbread-forge-${mc_version}"

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

sourceSets {
    main {
        resources {
            srcDir 'src/generated/resources' // Include resources generated by data generators
        }
    }
    datagen
}

minecraft {
    // official mappings augmented with parameter names and javadocs
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'bakingbread'

            mods {
                bakingbread {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'bakingbread'

            mods {
                bakingbread {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'bakingbread'

            mods {
                bakingbread {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'bakingbread', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                bakingbread {
                    source sourceSets.main
                    source sourceSets.datagen
                }
            }
        }

        dataCI {
            parent runs.data
            forceExit false
        }
    }
}


repositories {
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }

    maven {
        // location of the maven that hosts JEI files before January 2023
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://api.modrinth.com/maven" }
}

configurations {
    datagenImplementation.extendsFrom minecraft
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    minecraftLibrary 'com.scrtwpns:mixbox:2.0.0'
    //TODO: https://github.com/MinecraftForge/ForgeGradle/wiki/Dependencies#jar-in-jar

    // compile against the JEI API but do not include it at runtime
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    // at runtime, use the full JEI jar for Forge
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    //implementation fg.deobf("curse.maven:create-328085:4174330") //1.19.2-0.5.0.g
    //runtimeOnly fg.deobf("curse.maven:flywheel-486392:4174759") //1.19.2-0.6.8

    //runtimeOnly fg.deobf("curse.maven:farmers_delight-398521:3999157")
    runtimeOnly fg.deobf("curse.maven:simple_farming-327554:4406938") //1.19.2-2.0.4
    //runtimeOnly fg.deobf("curse.maven:pamhc2crops-361385:4465074")

    datagenImplementation sourceSets.main.output
}

// add properties into the manifest for reading at runtime
jar {
    manifest {
        attributes([
                "Specification-Title"     : "bakingbread",
                "Specification-Vendor"    : "Elenterius",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Elenterius",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}


// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')


tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

processResources {
    exclude '.cache'
    exclude '**/*.psd'
    exclude '**/*.bbmodel'
    exclude '**/*.pdn'
    doLast {
        minifyJsons(processResources.outputs.files.asPath)
    }
}

import java.util.concurrent.TimeUnit;

void minifyJsons(String fdir) {
    print "minmizing jsons..."
    long startTime = System.nanoTime()
    for (File file in fileTree(dir: fdir, include: "**/*.json")) {
        try {
            file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
        } catch (Exception e) {
            throw new Exception("Failed to minimize " + file, e)
        }
    }
    long ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS)
    printf "%7s sec, %s ms \n", (int) (ms / 1000), ms % 1000
}